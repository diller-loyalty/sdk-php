<?php
/**
 * MemberStampCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diller Retailer API
 *
 * The official Diller Retailer API (beta version) <br/> Last Updated: 07-11-2023 14:08
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MemberStampCard Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MemberStampCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MemberStampCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'external_id' => 'string',
        'article_number' => 'string',
        'title' => 'string',
        'description' => 'string',
        'required_points' => 'int',
        'is_restartable' => 'bool',
        'required_stamps' => 'int',
        'image_url' => 'string',
        'last_stamp_text' => 'string',
        'product_ids' => 'string[]',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'stamps_collected' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'external_id' => null,
        'article_number' => null,
        'title' => null,
        'description' => null,
        'required_points' => 'int32',
        'is_restartable' => null,
        'required_stamps' => 'int32',
        'image_url' => null,
        'last_stamp_text' => null,
        'product_ids' => null,
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'stamps_collected' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'external_id',
        'article_number' => 'article_number',
        'title' => 'title',
        'description' => 'description',
        'required_points' => 'required_points',
        'is_restartable' => 'is_restartable',
        'required_stamps' => 'required_stamps',
        'image_url' => 'image_url',
        'last_stamp_text' => 'last_stamp_text',
        'product_ids' => 'product_ids',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'stamps_collected' => 'stamps_collected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'article_number' => 'setArticleNumber',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'required_points' => 'setRequiredPoints',
        'is_restartable' => 'setIsRestartable',
        'required_stamps' => 'setRequiredStamps',
        'image_url' => 'setImageUrl',
        'last_stamp_text' => 'setLastStampText',
        'product_ids' => 'setProductIds',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'stamps_collected' => 'setStampsCollected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'article_number' => 'getArticleNumber',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'required_points' => 'getRequiredPoints',
        'is_restartable' => 'getIsRestartable',
        'required_stamps' => 'getRequiredStamps',
        'image_url' => 'getImageUrl',
        'last_stamp_text' => 'getLastStampText',
        'product_ids' => 'getProductIds',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'stamps_collected' => 'getStampsCollected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['required_points'] = isset($data['required_points']) ? $data['required_points'] : null;
        $this->container['is_restartable'] = isset($data['is_restartable']) ? $data['is_restartable'] : null;
        $this->container['required_stamps'] = isset($data['required_stamps']) ? $data['required_stamps'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['last_stamp_text'] = isset($data['last_stamp_text']) ? $data['last_stamp_text'] : null;
        $this->container['product_ids'] = isset($data['product_ids']) ? $data['product_ids'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['stamps_collected'] = isset($data['stamps_collected']) ? $data['stamps_collected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number article_number
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets required_points
     *
     * @return int
     */
    public function getRequiredPoints()
    {
        return $this->container['required_points'];
    }

    /**
     * Sets required_points
     *
     * @param int $required_points required_points
     *
     * @return $this
     */
    public function setRequiredPoints($required_points)
    {
        $this->container['required_points'] = $required_points;

        return $this;
    }

    /**
     * Gets is_restartable
     *
     * @return bool
     */
    public function getIsRestartable()
    {
        return $this->container['is_restartable'];
    }

    /**
     * Sets is_restartable
     *
     * @param bool $is_restartable is_restartable
     *
     * @return $this
     */
    public function setIsRestartable($is_restartable)
    {
        $this->container['is_restartable'] = $is_restartable;

        return $this;
    }

    /**
     * Gets required_stamps
     *
     * @return int
     */
    public function getRequiredStamps()
    {
        return $this->container['required_stamps'];
    }

    /**
     * Sets required_stamps
     *
     * @param int $required_stamps required_stamps
     *
     * @return $this
     */
    public function setRequiredStamps($required_stamps)
    {
        $this->container['required_stamps'] = $required_stamps;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets last_stamp_text
     *
     * @return string
     */
    public function getLastStampText()
    {
        return $this->container['last_stamp_text'];
    }

    /**
     * Sets last_stamp_text
     *
     * @param string $last_stamp_text last_stamp_text
     *
     * @return $this
     */
    public function setLastStampText($last_stamp_text)
    {
        $this->container['last_stamp_text'] = $last_stamp_text;

        return $this;
    }

    /**
     * Gets product_ids
     *
     * @return string[]
     */
    public function getProductIds()
    {
        return $this->container['product_ids'];
    }

    /**
     * Sets product_ids
     *
     * @param string[] $product_ids product_ids
     *
     * @return $this
     */
    public function setProductIds($product_ids)
    {
        $this->container['product_ids'] = $product_ids;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets stamps_collected
     *
     * @return int
     */
    public function getStampsCollected()
    {
        return $this->container['stamps_collected'];
    }

    /**
     * Sets stamps_collected
     *
     * @param int $stamps_collected stamps_collected
     *
     * @return $this
     */
    public function setStampsCollected($stamps_collected)
    {
        $this->container['stamps_collected'] = $stamps_collected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
