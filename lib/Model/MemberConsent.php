<?php
/**
 * MemberConsent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diller Retailer API
 *
 * The official Diller Retailer API (beta version) <br/> Last Updated: 07-11-2023 14:08
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MemberConsent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MemberConsent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MemberConsent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gdpr_accepted' => 'bool',
        'save_order_history' => 'bool',
        'receive_sms' => 'bool',
        'receive_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gdpr_accepted' => null,
        'save_order_history' => null,
        'receive_sms' => null,
        'receive_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gdpr_accepted' => 'gdpr_accepted',
        'save_order_history' => 'save_order_history',
        'receive_sms' => 'receive_sms',
        'receive_email' => 'receive_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gdpr_accepted' => 'setGdprAccepted',
        'save_order_history' => 'setSaveOrderHistory',
        'receive_sms' => 'setReceiveSms',
        'receive_email' => 'setReceiveEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gdpr_accepted' => 'getGdprAccepted',
        'save_order_history' => 'getSaveOrderHistory',
        'receive_sms' => 'getReceiveSms',
        'receive_email' => 'getReceiveEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gdpr_accepted'] = isset($data['gdpr_accepted']) ? $data['gdpr_accepted'] : null;
        $this->container['save_order_history'] = isset($data['save_order_history']) ? $data['save_order_history'] : null;
        $this->container['receive_sms'] = isset($data['receive_sms']) ? $data['receive_sms'] : null;
        $this->container['receive_email'] = isset($data['receive_email']) ? $data['receive_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gdpr_accepted
     *
     * @return bool
     */
    public function getGdprAccepted()
    {
        return $this->container['gdpr_accepted'];
    }

    /**
     * Sets gdpr_accepted
     *
     * @param bool $gdpr_accepted True if the member has accepted the GDPR. False otherwise.
     *
     * @return $this
     */
    public function setGdprAccepted($gdpr_accepted)
    {
        $this->container['gdpr_accepted'] = $gdpr_accepted;

        return $this;
    }

    /**
     * Gets save_order_history
     *
     * @return bool
     */
    public function getSaveOrderHistory()
    {
        return $this->container['save_order_history'];
    }

    /**
     * Sets save_order_history
     *
     * @param bool $save_order_history True if member has authorized to save order history e.g. transaction details about their purchases.
     *
     * @return $this
     */
    public function setSaveOrderHistory($save_order_history)
    {
        $this->container['save_order_history'] = $save_order_history;

        return $this;
    }

    /**
     * Gets receive_sms
     *
     * @return bool
     */
    public function getReceiveSms()
    {
        return $this->container['receive_sms'];
    }

    /**
     * Sets receive_sms
     *
     * @param bool $receive_sms True if the member has authorized the sending of promotional SMS. False otherwise.
     *
     * @return $this
     */
    public function setReceiveSms($receive_sms)
    {
        $this->container['receive_sms'] = $receive_sms;

        return $this;
    }

    /**
     * Gets receive_email
     *
     * @return bool
     */
    public function getReceiveEmail()
    {
        return $this->container['receive_email'];
    }

    /**
     * Sets receive_email
     *
     * @param bool $receive_email True if the member has authorized the sending of promotional Emails. False otherwise.
     *
     * @return $this
     */
    public function setReceiveEmail($receive_email)
    {
        $this->container['receive_email'] = $receive_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
