<?php
/**
 * MemberCouponResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DillerAPI
 * @author   DILLER AS
 * @link     https://diller.io
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \DillerAPI\ObjectSerializer;

/**
 * MemberCouponResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   DILLER AS
 * @link     https://diller.io
 */
class MemberCouponResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MemberCouponResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'external_ids' => '\Swagger\Client\Model\ExternalCouponIdentifier[]',
'code' => 'string',
'title' => 'string',
'description' => 'string',
'article_number' => 'string',
'valid_from' => '\DateTime',
'valid_to' => '\DateTime',
'type' => '\Swagger\Client\Model\CouponType',
'discount_type' => '\Swagger\Client\Model\CouponDiscountType',
'discount_value' => 'double',
'max_redemptions' => 'int',
'image_url' => 'string',
'product_ids' => 'string[]',
'times_redeemed' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'external_ids' => null,
'code' => null,
'title' => null,
'description' => null,
'article_number' => null,
'valid_from' => 'date-time',
'valid_to' => 'date-time',
'type' => null,
'discount_type' => null,
'discount_value' => 'double',
'max_redemptions' => 'int32',
'image_url' => null,
'product_ids' => null,
'times_redeemed' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'external_ids' => 'external_ids',
'code' => 'code',
'title' => 'title',
'description' => 'description',
'article_number' => 'article_number',
'valid_from' => 'valid_from',
'valid_to' => 'valid_to',
'type' => 'type',
'discount_type' => 'discount_type',
'discount_value' => 'discount_value',
'max_redemptions' => 'max_redemptions',
'image_url' => 'image_url',
'product_ids' => 'product_ids',
'times_redeemed' => 'times_redeemed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'external_ids' => 'setExternalIds',
'code' => 'setCode',
'title' => 'setTitle',
'description' => 'setDescription',
'article_number' => 'setArticleNumber',
'valid_from' => 'setValidFrom',
'valid_to' => 'setValidTo',
'type' => 'setType',
'discount_type' => 'setDiscountType',
'discount_value' => 'setDiscountValue',
'max_redemptions' => 'setMaxRedemptions',
'image_url' => 'setImageUrl',
'product_ids' => 'setProductIds',
'times_redeemed' => 'setTimesRedeemed'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'external_ids' => 'getExternalIds',
'code' => 'getCode',
'title' => 'getTitle',
'description' => 'getDescription',
'article_number' => 'getArticleNumber',
'valid_from' => 'getValidFrom',
'valid_to' => 'getValidTo',
'type' => 'getType',
'discount_type' => 'getDiscountType',
'discount_value' => 'getDiscountValue',
'max_redemptions' => 'getMaxRedemptions',
'image_url' => 'getImageUrl',
'product_ids' => 'getProductIds',
'times_redeemed' => 'getTimesRedeemed'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_ids'] = isset($data['external_ids']) ? $data['external_ids'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['discount_value'] = isset($data['discount_value']) ? $data['discount_value'] : null;
        $this->container['max_redemptions'] = isset($data['max_redemptions']) ? $data['max_redemptions'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['product_ids'] = isset($data['product_ids']) ? $data['product_ids'] : null;
        $this->container['times_redeemed'] = isset($data['times_redeemed']) ? $data['times_redeemed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        if ($this->container['valid_to'] === null) {
            $invalidProperties[] = "'valid_to' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return \Swagger\Client\Model\ExternalCouponIdentifier[]
     */
    public function getExternalIds()
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param \Swagger\Client\Model\ExternalCouponIdentifier[] $external_ids external_ids
     *
     * @return $this
     */
    public function setExternalIds($external_ids)
    {
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number article_number
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from The startDate of the coupon
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\CouponType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\CouponType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return \Swagger\Client\Model\CouponDiscountType
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param \Swagger\Client\Model\CouponDiscountType $discount_type discount_type
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets discount_value
     *
     * @return double
     */
    public function getDiscountValue()
    {
        return $this->container['discount_value'];
    }

    /**
     * Sets discount_value
     *
     * @param double $discount_value discount_value
     *
     * @return $this
     */
    public function setDiscountValue($discount_value)
    {
        $this->container['discount_value'] = $discount_value;

        return $this;
    }

    /**
     * Gets max_redemptions
     *
     * @return int
     */
    public function getMaxRedemptions()
    {
        return $this->container['max_redemptions'];
    }

    /**
     * Sets max_redemptions
     *
     * @param int $max_redemptions max_redemptions
     *
     * @return $this
     */
    public function setMaxRedemptions($max_redemptions)
    {
        $this->container['max_redemptions'] = $max_redemptions;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets product_ids
     *
     * @return string[]
     */
    public function getProductIds()
    {
        return $this->container['product_ids'];
    }

    /**
     * Sets product_ids
     *
     * @param string[] $product_ids product_ids
     *
     * @return $this
     */
    public function setProductIds($product_ids)
    {
        $this->container['product_ids'] = $product_ids;

        return $this;
    }

    /**
     * Gets times_redeemed
     *
     * @return int
     */
    public function getTimesRedeemed()
    {
        return $this->container['times_redeemed'];
    }

    /**
     * Sets times_redeemed
     *
     * @param int $times_redeemed times_redeemed
     *
     * @return $this
     */
    public function setTimesRedeemed($times_redeemed)
    {
        $this->container['times_redeemed'] = $times_redeemed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
