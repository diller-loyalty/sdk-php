<?php
/**
 * StoreResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diller Retailer API
 *
 * The official Diller Retailer API (beta version) <br/> Last Updated: 07-11-2023 14:08
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StoreResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'tax_number' => 'string',
        'external_id' => 'string',
        'store_name' => 'string',
        'phone' => '\Swagger\Client\Model\Phone',
        'email' => 'string',
        'address' => '\Swagger\Client\Model\Address',
        'currency' => 'string',
        'time_zone' => 'string',
        'culture' => 'string',
        'stamps_enabled' => 'bool',
        'friend_referral_enabled' => 'bool',
        'points_system' => '\Swagger\Client\Model\PointsSystem',
        'member_identifier' => '\Swagger\Client\Model\MemberIdentifier',
        'privacy_policy_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'tax_number' => null,
        'external_id' => null,
        'store_name' => null,
        'phone' => null,
        'email' => null,
        'address' => null,
        'currency' => null,
        'time_zone' => null,
        'culture' => null,
        'stamps_enabled' => null,
        'friend_referral_enabled' => null,
        'points_system' => null,
        'member_identifier' => null,
        'privacy_policy_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tax_number' => 'tax_number',
        'external_id' => 'external_id',
        'store_name' => 'store_name',
        'phone' => 'phone',
        'email' => 'email',
        'address' => 'address',
        'currency' => 'currency',
        'time_zone' => 'time_zone',
        'culture' => 'culture',
        'stamps_enabled' => 'stamps_enabled',
        'friend_referral_enabled' => 'friend_referral_enabled',
        'points_system' => 'points_system',
        'member_identifier' => 'member_identifier',
        'privacy_policy_url' => 'privacy_policy_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tax_number' => 'setTaxNumber',
        'external_id' => 'setExternalId',
        'store_name' => 'setStoreName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'currency' => 'setCurrency',
        'time_zone' => 'setTimeZone',
        'culture' => 'setCulture',
        'stamps_enabled' => 'setStampsEnabled',
        'friend_referral_enabled' => 'setFriendReferralEnabled',
        'points_system' => 'setPointsSystem',
        'member_identifier' => 'setMemberIdentifier',
        'privacy_policy_url' => 'setPrivacyPolicyUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tax_number' => 'getTaxNumber',
        'external_id' => 'getExternalId',
        'store_name' => 'getStoreName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'currency' => 'getCurrency',
        'time_zone' => 'getTimeZone',
        'culture' => 'getCulture',
        'stamps_enabled' => 'getStampsEnabled',
        'friend_referral_enabled' => 'getFriendReferralEnabled',
        'points_system' => 'getPointsSystem',
        'member_identifier' => 'getMemberIdentifier',
        'privacy_policy_url' => 'getPrivacyPolicyUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['stamps_enabled'] = isset($data['stamps_enabled']) ? $data['stamps_enabled'] : null;
        $this->container['friend_referral_enabled'] = isset($data['friend_referral_enabled']) ? $data['friend_referral_enabled'] : null;
        $this->container['points_system'] = isset($data['points_system']) ? $data['points_system'] : null;
        $this->container['member_identifier'] = isset($data['member_identifier']) ? $data['member_identifier'] : null;
        $this->container['privacy_policy_url'] = isset($data['privacy_policy_url']) ? $data['privacy_policy_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number tax_number
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string $store_name store_name
     *
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Swagger\Client\Model\Phone
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Swagger\Client\Model\Phone $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture culture
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets stamps_enabled
     *
     * @return bool
     */
    public function getStampsEnabled()
    {
        return $this->container['stamps_enabled'];
    }

    /**
     * Sets stamps_enabled
     *
     * @param bool $stamps_enabled stamps_enabled
     *
     * @return $this
     */
    public function setStampsEnabled($stamps_enabled)
    {
        $this->container['stamps_enabled'] = $stamps_enabled;

        return $this;
    }

    /**
     * Gets friend_referral_enabled
     *
     * @return bool
     */
    public function getFriendReferralEnabled()
    {
        return $this->container['friend_referral_enabled'];
    }

    /**
     * Sets friend_referral_enabled
     *
     * @param bool $friend_referral_enabled friend_referral_enabled
     *
     * @return $this
     */
    public function setFriendReferralEnabled($friend_referral_enabled)
    {
        $this->container['friend_referral_enabled'] = $friend_referral_enabled;

        return $this;
    }

    /**
     * Gets points_system
     *
     * @return \Swagger\Client\Model\PointsSystem
     */
    public function getPointsSystem()
    {
        return $this->container['points_system'];
    }

    /**
     * Sets points_system
     *
     * @param \Swagger\Client\Model\PointsSystem $points_system points_system
     *
     * @return $this
     */
    public function setPointsSystem($points_system)
    {
        $this->container['points_system'] = $points_system;

        return $this;
    }

    /**
     * Gets member_identifier
     *
     * @return \Swagger\Client\Model\MemberIdentifier
     */
    public function getMemberIdentifier()
    {
        return $this->container['member_identifier'];
    }

    /**
     * Sets member_identifier
     *
     * @param \Swagger\Client\Model\MemberIdentifier $member_identifier member_identifier
     *
     * @return $this
     */
    public function setMemberIdentifier($member_identifier)
    {
        $this->container['member_identifier'] = $member_identifier;

        return $this;
    }

    /**
     * Gets privacy_policy_url
     *
     * @return string
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacy_policy_url'];
    }

    /**
     * Sets privacy_policy_url
     *
     * @param string $privacy_policy_url privacy_policy_url
     *
     * @return $this
     */
    public function setPrivacyPolicyUrl($privacy_policy_url)
    {
        $this->container['privacy_policy_url'] = $privacy_policy_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
